https://www.hackerearth.com/practice/data-structures/disjoint-data-strutures/basics-of-disjoint-data-structures/practice-problems/algorithm/city-and-flood-1/



//    disjoint set union problem (very easy type)





#include <bits/stdc++.h>
using namespace std;
const int N=1e5+5;

int parent[N];
int size[N];

void make(int i){
	parent[i]=i;
	size[i]=1;
}

int find(int val){
		if(parent[val]==val){return val;}
	return parent[val]=find(parent[val]);
}


void Union(int a,int b){

a=find(a);
b=find(b);

if(a!=b){
	if(size[b]>size[a]){
		swap(a,b);
	}
    parent[b]=a;
	size[a]+=size[b];
    
}

}



int main() {
	
int n,k;
cin>>n>>k;

for(int i=1;i<=n;i++){
	make(i);
}

while(k--){
	int i,j;
	cin>>i>>j;
	Union(i,j);
}
int count=0;
for(int i=1;i<=n;i++){
    if(find(i)==i){count++;}
}

cout<<count<<endl;


}
