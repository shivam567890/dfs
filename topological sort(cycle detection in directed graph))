
1) cycle detecion in directed graph

https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1


code:

//  approach:   BFS traversal !!

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    
    bool isCyclic(int V, vector<int> adj[]) {
       vector<int>indegree(V,0);
       for(int i=0;i<V;i++){
       for(auto it:adj[i]){
           indegree[it]++;
       }
       }
        queue<int>q;
        
      for(int i=0;i<indegree.size();i++){
          if(indegree[i]==0){
              q.push(i);
          }
      }  
        while(!q.empty()){
            
            int l=q.front();
            q.pop();
            
            for(auto child:adj[l]){
                indegree[child]--;
                if(indegree[child]==0){
                    q.push(child);
                }
            }
        }
        bool c=0;
     for(int i=0;i<indegree.size();i++){
         if(indegree[i]!=0){
             c=1;
         }
     }   
      
        if(c==1){
            return 1;
        }
        return 0;
        
    }
};








// dfs approach for detecting cycle in directed graph

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    
    bool dfs(int i,vector<int> adj[],vector<int>&vis,vector<int>&dfs_vis){
        vis[i]=1;
        dfs_vis[i]=1;
        
        for(auto child:adj[i]){
            if(!vis[child]){
               if( dfs(child,adj,vis,dfs_vis)){
                   return 1;
               }
            }
            
            else if(dfs_vis[child]){
                return 1;
            }
            
        }
        
        dfs_vis[i]=0;
        return 0;
    }
    
    bool isCyclic(int V, vector<int> adj[]) {
   
   vector<int>vis(V,0);
   vector<int>dfs_vis(V,0);
   
   
//   bool flag=0;
   for(int i=0;i<V;i++){
       if(vis[i]==0){
        if(dfs(i,adj,vis,dfs_vis)){
            return true;
        }
       }
   }
   return false;
        
    }
};
